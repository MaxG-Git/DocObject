var Doc;!function(){"use strict";var t={360:function(t,e,n){Object.defineProperty(e,"__esModule",{value:!0});const i=n(391);e.default=class{constructor(t){return this.obj=t,new Proxy(this,{get:(t,e)=>this.Gen(e)})}Gen(t){return(e=[],n)=>{if(this.obj&&t in this.obj.binds){const r=this.obj.binds[t](this.obj.values,n,i.DocObject.toNodeArray(e),this.obj.values);return"function"==typeof r?r(this.obj.g):r}let r=document.createElement(t);for(let t in n)if("style"===t&&"object"==typeof n[t])for(let e in n[t])r.style[e]=n[t][e];else t in Object.getPrototypeOf(r)?r[t]=n[t]:r.setAttribute(t,n[t]);return i.DocObject.toNodeArray(e).forEach((t=>{t.parentElement&&"D-BIND"===t.parentElement.nodeName?r.appendChild(t.cloneNode(!0)):r.appendChild(t)})),r}}}},391:function(t,e,n){var i=this&&this.__createBinding||(Object.create?function(t,e,n,i){void 0===i&&(i=n),Object.defineProperty(t,i,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,i){void 0===i&&(i=n),t[i]=e[n]}),r=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&i(e,t,n);return r(e,t),e},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.DocObject=e.DocObjectElement=void 0;const c=s(n(360)),a=o(n(382));class u extends HTMLElement{constructor(){super()}}e.DocObjectElement=u;class d{constructor(t,e){this._this=this,this.querySelectorAll=t=>this.root.querySelectorAll(t);const{elements:n,values:i,render:r,binds:o,bindAttr:s,bindInAttr:u,isJQuery:l,connections:h,removeOnload:f}=d.defaultParams(e);let b=d.toNodeArray(t)[0];b instanceof HTMLElement?this.root=b:(0,a.default)(a.ROOT_ERROR,!0),this._connections=h,l&&window.jQuery?(this._isJQuery=!0,this._querySelect=(...t)=>$(this.root).find(...t)):(l&&(0,a.default)(a.JQUERY_NOT_DETECTED,!1),this._isJQuery=!1,this._querySelect=(...t)=>this.root.querySelectorAll(...t)),this.root._DocObject=this,this.root.setAttribute("doc-object",""),this.render=r,this.g=new c.default(this),this.attrs=d.extractAttributes(this.root),this.binds="function"==typeof o?o(this.g):o,this.bindAttr=s,this.bindInAttr=u,this.query=new Proxy({},{get:(t,e)=>{if("string"==typeof e)return t[e]?t[e]:t=>this._querySelect(/.*(\.|\#|\[|\]).*/gm.exec(e)?e:"#"+e)},set:(t,e,n,i)=>("string"==typeof n&&(n=()=>this._querySelect(n)),"string"==typeof e&&(t[e]=t=>n),!0)}),this.elements=new Proxy(this.query,{get:(t,e)=>t[e]()}),n&&Object.entries(n).forEach((t=>{this.query[t[0]]=t[1]})),this._values=new Proxy(i&&"object"==typeof i?i:{},{set:(t,e,n,i)=>(t[e]=n,this.runRender({[e]:n}),this.runConnections({[e]:n}),!0),get:(t,e)=>"function"==typeof t[e]?t[e](this.attrs):t[e]}),this.onLoad=()=>{this.runRender(Object.assign(Object.assign({},this.values),{[!0]:!0})),this.runConnections(this.values)},f||(window.onload=this.onLoad)}static toNodeArray(t){return"string"==typeof t||"number"==typeof t?[...d.parser.parseFromString(t.toString(),"text/html").body.childNodes]:NodeList.prototype.isPrototypeOf(t)||window.jQuery&&t instanceof jQuery?[...t]:Array.isArray(t)?t.filter((t=>"string"==typeof t||t instanceof Node)).map((t=>"string"==typeof t?d.toNodeArray(t)[0]:t)):t instanceof Node||t instanceof Document?[t]:[]}static defaultParams({render:t=[],binds:e={},elements:n={},values:i={},bindAttr:r="d-bind",bindInAttr:o="d-bind-in",isJQuery:s=!1,connections:c=[],removeOnload:a=!1}={}){return{elements:n,values:i,render:t,binds:e,bindAttr:r,bindInAttr:o,isJQuery:s,connections:c,removeOnload:a}}static extractAttributes(t){return[...t.attributes].reduce(((t,e)=>Object.assign(Object.assign({},t),{[e.name.replace(/-([a-z])/g,(function(t){return t[1].toUpperCase()}))]:e.value})),{})}defaultRunBindOptions({root:t,valueChanges:e,additionalHosts:n=[],memoizedElements:i=[]}){return{root:t,valueChanges:e,additionalHosts:n,memoizedElements:i}}set values(t){throw Error("Tried to set DocObject.value. Try creating a inner object instead.")}get values(){return this._values}isBindIn(t){return t.getAttribute(this.bindInAttr)&&!0}isBind(t){return("d-bind"===t.localName||t.getAttribute(this.bindAttr))&&!0}static isDobObjectElement(t){return t._DocObject instanceof d}findOrRegisterBind(t){if(void 0===t._DocObjectConfig){let e=this._isJQuery?$([...t.childNodes]):[...t.childNodes];e.toString=()=>t.innerHTML,t._DocObjectConfig={originalChildren:e,originalChildrenHTML:t.innerHTML,originalAttributes:d.extractAttributes(t)}}return t._DocObjectConfig}generateBind(t,e,n){const i=t._DocObjectConfig,r=d.toNodeArray("function"==typeof n?n.bind(this._this)(this.g):n);if(this.isBind(t)){const t=r.find((t=>t instanceof HTMLElement));return t._DocObjectConfig=i,t.setAttribute("d-bind"===t.localName?"to":this.bindAttr,e),Object.entries(i.originalAttributes).filter((t=>!["d-bind-in","to"].includes(t[0]))).forEach((e=>t.setAttribute(e[0],e[1]))),t}return r}runRender(t={}){this.render.filter((e=>e.dep&&Array.isArray(e.dep)&&e.dep.some((e=>e in t))||void 0===e.dep)).forEach((e=>{e.clean&&e.clean(Object.assign(Object.assign({},this.values),t),this.values),e.action(Object.assign(Object.assign({},this.values),t),this.values)})),this.runBinds({root:this.root,valueChanges:t,additionalHosts:[this.root],memoizedElements:[]})}getBindAction(t,e){if(this.isBind(t)){if(t.getAttribute(this.bindAttr))return[t.getAttribute(this.bindAttr),e=>t.parentNode.replaceChild(e,t)];if("d-bind"===t.localName)return[t.getAttribute("to"),e=>t.parentNode.replaceChild(e,t)]}else{if(this.isBindIn(t))return[t.getAttribute(this.bindInAttr),e=>{t.innerHTML="";for(let n of e)t.appendChild(n)}];if(d.isDobObjectElement(t))return t===this.root?["this",e=>{t.innerHTML="";for(let n of e)t.appendChild(n)}]:(t._DocObject.runRender(e),null)}}runBinds(t){const{root:e,valueChanges:n,additionalHosts:i,memoizedElements:r}=this.defaultRunBindOptions(t);return(Array.isArray(e)?e:[e]).filter((t=>t&&t instanceof HTMLElement)).forEach((t=>{[...t.querySelectorAll(`[${this.bindAttr}], [${this.bindInAttr}], d-bind[to], [doc-object]`),...i].forEach((t=>{if(r.some((e=>t.isSameNode(e))))return;r.push(t);const e=this.getBindAction(t,n);if(e){const[i,o]=e;if(i in this.binds){const e=this.findOrRegisterBind(t);o(this.runBinds({root:this.generateBind(t,i,this.binds[i].bind(this._this)(this.values,e.originalAttributes,e.originalChildren,n)),valueChanges:n,memoizedElements:r}))}}}))})),e}runConnections(t={[!0]:!0}){for(let e in t)this._connections.forEach((n=>n.values[e]=t[e]))}connect(...t){return this._connections=[...this._connections,...t],this.runConnections(this.values),this}}e.DocObject=d,d.parser=new DOMParser},382:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.JQUERY_NOT_DETECTED=e.ROOT_ERROR=void 0,e.ROOT_ERROR="ROOT_ERROR",e.JQUERY_NOT_DETECTED="JQUERY_NOT_DETECTED",e.default=function(t,e=!1){if(t in n){if(e)throw Error("DocObject: "+n[t].message);console.error(n[t].message)}};const n={ROOT_ERROR:{message:"Root Element Must be a valid Node, Or jQuery Element"},JQUERY_NOT_DETECTED:{message:"JQuery is not detected. Please load JQuery before DocObject"}}},294:function(t,e,n){var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.gen=e.obj=e.fixInput=void 0;const r=n(391),o=i(n(360)),s=n(605);class c extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"});const t=document.createElement("div");t.style.display="none",this.shadowRoot.append(t)}}e.fixInput=function(t,e){let n=(0,s.getCursorPos)(t()[0]);e(),(0,s.setCursorPos)(t()[0],n)},window.customElements.define("d-bind",c),window.customElements.define("doc-object",r.DocObjectElement),window.jQuery&&jQuery.fn.extend({DocObject:function(t=null){return this[0]._DocObject&&!t||(this.each((function(){new r.DocObject(this,t)})),new r.DocObject(this,Object.assign({isJQuery:!0},t))),this[0]._DocObject}}),e.obj=function(t,e){return new r.DocObject(t,e)},e.gen=function(){return new o.default}},605:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.setCursorPos=e.getCursorPos=void 0,e.getCursorPos=function(t){return"backward"==t.selectionDirection?t.selectionStart:t.selectionEnd},e.setCursorPos=function(t,e){if(t.setSelectionRange)t.focus(),t.setSelectionRange(e,e);else if(t.createTextRange){var n=t.createTextRange();n.collapse(!0),n.moveEnd("character",e),n.moveStart("character",e),n.select()}}}},e={},n=function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={exports:{}};return t[i].call(o.exports,o,o.exports,n),o.exports}(294);Doc=n}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,