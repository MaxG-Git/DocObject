var Doc;(()=>{"use strict";var e={391:function(e,t,i){var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[i]}})}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.obj=t.DocObject=t.fixInput=void 0;const o=i(605),a=s(i(382));t.fixInput=function(e,t){let i=(0,o.getCursorPos)(e()[0]);t(),(0,o.setCursorPos)(e()[0],i)};class c extends HTMLElement{constructor(){super()}}window.customElements.define("d-bind",c);class d{constructor(e,t){const{elements:i,values:r,render:n,binds:s,bindAttr:o,bindInAttr:c,isJQuery:u}=d.defaultParams(t);let l=d.toNodeArray(e)[0];l instanceof HTMLElement?this.root=l:(0,a.default)(a.ROOT_ERROR,!0),u&&window.jQuery?(this._isJQuery=!0,this._querySelect=(...e)=>$(this.root).find(...e)):(u&&(0,a.default)(a.JQUERY_NOT_DETECTED,!1),this._isJQuery=!1,this._querySelect=(...e)=>this.root.querySelectorAll(...e)),this.root._DocObject=this,this.render=n,this.binds=s,this.bindAttr=o,this.bindInAttr=c,this.query=new Proxy({},{get:(e,t)=>{if("string"==typeof t)return e[t]?e[t]:e=>this._querySelect(/.*(\.|\#|\[|\]).*/gm.exec(t)?t:"#"+t)},set:(e,t,i,r)=>("string"==typeof i&&(i=()=>this._querySelect(i)),"string"==typeof t&&(e[t]=e=>i),!0)}),this.elements=new Proxy(this.query,{get:(e,t)=>e[t]()}),i&&Object.entries(i).forEach((e=>{this.query[e[0]]=e[1]})),this._values=new Proxy(r&&"object"==typeof r?r:{},{set:(e,t,i,r)=>(this.runRender({[t]:i}),e[t]=i,!0)}),this.onLoad=()=>{this.runRender({[!0]:!0})},this._isJQuery?$(this.onLoad):window.onload=this.onLoad}static toNodeArray(e){return"string"==typeof e?[...d.parser.parseFromString(e,"text/html").body.childNodes]:NodeList.prototype.isPrototypeOf(e)||window.jQuery&&e instanceof jQuery?[...e]:Array.isArray(e)?e.filter((e=>"string"==typeof e||e instanceof Node)).map((e=>"string"==typeof e?d.toNodeArray(e)[0]:e)):e instanceof Node||e instanceof Document?[e]:void 0}static defaultParams({render:e=[],binds:t={},elements:i={},values:r={},bindAttr:n="d-bind",bindInAttr:s="d-bind-in",isJQuery:o=!1}={}){return{elements:i,values:r,render:e,binds:t,bindAttr:n,bindInAttr:s,isJQuery:o}}set values(e){throw Error("Tried to set DocObject.value. Try creating a inner object instead.")}get values(){return this._values}isBindIn(e){return e.getAttribute(this.bindInAttr)&&!0}isBind(e){return("d-bind"===e.localName||e.getAttribute(this.bindAttr))&&!0}findOrRegisterBind(e){if(void 0===e._DocObjectConfig){let t=[...e.childNodes];t.toString=()=>e.innerHTML,e._DocObjectConfig={originalChildren:t,originalChildrenHTML:e.innerHTML,originalAttributes:[...e.attributes].reduce(((e,t)=>Object.assign(Object.assign({},e),{[t.name]:t.value})),{})}}return e._DocObjectConfig}generateBind(e,t,i){const r=e._DocObjectConfig,n=d.toNodeArray(i);if(this.isBind(e)){const e=n.find((e=>e instanceof HTMLElement));return e._DocObjectConfig=r,e.setAttribute("d-bind"===e.localName?"to":this.bindAttr,t),Object.entries(r.originalAttributes).filter((e=>!["d-bind-in","to"].includes(e[0]))).forEach((t=>e.setAttribute(t[0],t[1]))),e}return n}runRender(e={}){this.render.filter((t=>t.dep&&Array.isArray(t.dep)&&t.dep.some((t=>t in e))||void 0===t.dep)).forEach((t=>{t.clean&&t.clean(Object.assign(Object.assign({},this.values),e),this.values),t.action(Object.assign(Object.assign({},this.values),e),this.values)})),this.runBinds(this.root,e)}getBindAction(e){if(this.isBind(e)){if(e.getAttribute(this.bindAttr))return[e.getAttribute(this.bindAttr),t=>e.parentNode.replaceChild(t,e)];if("d-bind"===e.localName)return[e.getAttribute("to"),t=>e.parentNode.replaceChild(t,e)]}else if(this.isBindIn(e))return[e.getAttribute(this.bindInAttr),t=>{e.innerHTML="";for(let i of t)e.appendChild(i)}]}runBinds(e,t={}){return(Array.isArray(e)?e:[e]).filter((e=>e&&e instanceof HTMLElement)).forEach((e=>{[...e.querySelectorAll(`[${this.bindAttr}], [${this.bindInAttr}], d-bind[to]`)].forEach((e=>{const[i,r]=this.getBindAction(e);if(i in this.binds){const n=this.findOrRegisterBind(e);r(this.runBinds(this.generateBind(e,i,this.binds[i](Object.assign(Object.assign({},this.values),t),n.originalAttributes,n.originalChildren)),t))}}))})),e}}t.DocObject=d,d.parser=new DOMParser,window.jQuery&&jQuery.fn.extend({DocObject:function(e=null){return this[0]._DocObject&&!e||(this.each((function(){new d(this,e)})),new d(this,Object.assign({isJQuery:!0},e))),this[0]._DocObject}}),t.obj=function(e,t){return new d(e,t)}},382:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.JQUERY_NOT_DETECTED=t.ROOT_ERROR=void 0,t.ROOT_ERROR="ROOT_ERROR",t.JQUERY_NOT_DETECTED="JQUERY_NOT_DETECTED",t.default=function(e,t=!1){if(e in i){if(t)throw Error("DocObject: "+i[e].message);console.error(i[e].message)}};const i={ROOT_ERROR:{message:"Root Element Must be a valid Node, Or jQuery Element"},JQUERY_NOT_DETECTED:{message:"JQuery is not detected. Please load JQuery before DocObject"}}},605:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setCursorPos=t.getCursorPos=void 0,t.getCursorPos=function(e){return"backward"==e.selectionDirection?e.selectionStart:e.selectionEnd},t.setCursorPos=function(e,t){if(e.setSelectionRange)e.focus(),e.setSelectionRange(t,t);else if(e.createTextRange){var i=e.createTextRange();i.collapse(!0),i.moveEnd("character",t),i.moveStart("character",t),i.select()}}}},t={},i=function i(r){var n=t[r];if(void 0!==n)return n.exports;var s=t[r]={exports:{}};return e[r].call(s.exports,s,s.exports,i),s.exports}(391);Doc=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,