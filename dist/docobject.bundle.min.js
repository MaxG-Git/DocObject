var Doc;(()=>{"use strict";var e={391:function(e,t,i){var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[i]}})}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.obj=t.DocObject=t.fixInput=void 0;const o=i(605),a=s(i(382));t.fixInput=function(e,t){let i=(0,o.getCursorPos)(e()[0]);t(),(0,o.setCursorPos)(e()[0],i)};class c extends HTMLElement{constructor(){super()}}window.customElements.define("d-bind",c);class d{constructor(e,t){const{elements:i,values:r,render:n,binds:s,bindAttr:o,bindInAttr:c,isJQuery:u}=d.defaultParams(t);let l=d.toNodeArray(e)[0];l instanceof HTMLElement?this.root=l:(0,a.default)(a.ROOT_ERROR,!0),u&&window.jQuery?(this._isJQuery=!0,this._querySelect=(...e)=>$(this.root).find(...e)):(u&&(0,a.default)(a.JQUERY_NOT_DETECTED,!1),this._isJQuery=!1,this._querySelect=(...e)=>this.root.querySelectorAll(...e)),this.root._DocObject=this,this.render=n,this.binds=s,this.bindAttr=o,this.bindInAttr=c,this.query=new Proxy({},{get:(e,t)=>{if("string"==typeof t)return e[t]?e[t]:e=>this._querySelect(/.*(\.|\#|\[|\]).*/gm.exec(t)?t:"#"+t)},set:(e,t,i,r)=>("string"==typeof i&&(i=()=>this._querySelect(i)),"string"==typeof t&&(e[t]=e=>i),!0)}),this.elements=new Proxy(this.query,{get:(e,t)=>e[t]()}),i&&Object.entries(i).forEach((e=>{this.query[e[0]]=e[1]})),this._values=new Proxy(r&&"object"==typeof r?r:{},{set:(e,t,i,r)=>(this.runRender({[t]:i}),e[t]=i,!0)}),this.onLoad=()=>{this.runRender({[!0]:!0})},this._isJQuery?$(this.onLoad):window.onload=this.onLoad}static toNodeArray(e){return"string"==typeof e?[...d.parser.parseFromString(e,"text/html").body.childNodes]:NodeList.prototype.isPrototypeOf(e)||window.jQuery&&e instanceof jQuery?[...e]:Array.isArray(e)?e.filter((e=>"string"==typeof e||e instanceof Node)).map((e=>"string"==typeof e?d.toNodeArray(e)[0]:e)):e instanceof Node||e instanceof Document?[e]:void 0}static defaultParams({render:e=[],binds:t={},elements:i={},values:r={},bindAttr:n="d-bind",bindInAttr:s="d-bind-in",isJQuery:o=!1}={}){return{elements:i,values:r,render:e,binds:t,bindAttr:n,bindInAttr:s,isJQuery:o}}set values(e){throw Error("Tried to set DocObject.value. Try creating a inner object instead.")}get values(){return this._values}isBindIn(e){return e.getAttribute(this.bindInAttr)&&!0}isBind(e){return("d-bind"===e.localName||e.getAttribute(this.bindAttr))&&!0}findOrRegisterBind(e){if(void 0===e._DocObjectConfig){let t=[...e.childNodes];t.toString=()=>e.innerHTML,e._DocObjectConfig={originalChildren:t,originalChildrenHTML:e.innerHTML,originalAttributes:[...e.attributes].reduce(((e,t)=>Object.assign(Object.assign({},e),{[t.name]:t.value})),{})}}return e._DocObjectConfig}generateBind(e,t,i){const r=e._DocObjectConfig,n=d.toNodeArray(i);if(this.isBind(e)){const e=n.find((e=>e instanceof HTMLElement));return e._DocObjectConfig=r,e.setAttribute("d-bind"===e.localName?"to":this.bindAttr,t),Object.entries(r.originalAttributes).filter((e=>!["d-bind-in","to"].includes(e[0]))).forEach((t=>e.setAttribute(t[0],t[1]))),e}return n}runRender(e={}){this.render.filter((t=>t.dep&&Array.isArray(t.dep)&&t.dep.some((t=>t in e))||void 0===t.dep)).forEach((t=>{t.clean&&t.clean(Object.assign(Object.assign({},this.values),e),this.values),t.action(Object.assign(Object.assign({},this.values),e),this.values)})),this.runBinds(this.root,e)}getBindAction(e){if(this.isBind(e)){if(e.getAttribute(this.bindAttr))return[e.getAttribute(this.bindAttr),t=>e.parentNode.replaceChild(t,e)];if("d-bind"===e.localName)return[e.getAttribute("to"),t=>e.parentNode.replaceChild(t,e)]}else if(this.isBindIn(e))return[e.getAttribute(this.bindInAttr),t=>{e.innerHTML="";for(let i of t)e.appendChild(i)}]}runBinds(e,t={}){return(Array.isArray(e)?e:[e]).filter((e=>e&&e instanceof HTMLElement)).forEach((e=>{[...e.querySelectorAll(`[${this.bindAttr}], [${this.bindInAttr}], d-bind[to]`)].forEach((e=>{const[i,r]=this.getBindAction(e);if(i in this.binds){const n=this.findOrRegisterBind(e);r(this.runBinds(this.generateBind(e,i,this.binds[i](Object.assign(Object.assign({},this.values),t),n.originalAttributes,n.originalChildren)),t))}}))})),e}}t.DocObject=d,d.parser=new DOMParser,window.jQuery&&jQuery.fn.extend({DocObject:function(e=null){return this[0]._DocObject&&!e||(this.each((function(){new d(this,e)})),new d(this,Object.assign({isJQuery:!0},e))),this[0]._DocObject}}),t.obj=function(e,t){return new d(e,t)}},382:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.JQUERY_NOT_DETECTED=t.ROOT_ERROR=void 0,t.ROOT_ERROR="ROOT_ERROR",t.JQUERY_NOT_DETECTED="JQUERY_NOT_DETECTED",t.default=function(e,t=!1){if(e in i){if(t)throw Error("DocObject: "+i[e].message);console.error(i[e].message)}};const i={ROOT_ERROR:{message:"Root Element Must be a valid Node, Or jQuery Element"},JQUERY_NOT_DETECTED:{message:"JQuery is not detected. Please load JQuery before DocObject"}}},605:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setCursorPos=t.getCursorPos=void 0,t.getCursorPos=function(e){return"backward"==e.selectionDirection?e.selectionStart:e.selectionEnd},t.setCursorPos=function(e,t){if(e.setSelectionRange)e.focus(),e.setSelectionRange(t,t);else if(e.createTextRange){var i=e.createTextRange();i.collapse(!0),i.moveEnd("character",t),i.moveStart("character",t),i.select()}}}},t={},i=function i(r){var n=t[r];if(void 0!==n)return n.exports;var s=t[r]={exports:{}};return e[r].call(s.exports,s,s.exports,i),s.exports}(391);Doc=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bEQsR0FLdEIsTUFBcUMsWUFBOUJBLEVBQVFvRCxtQkFBbUNwRCxFQUFRcUQsZUFBaUJyRCxFQUFRc0QsY0FJM0Ysd0JBQTZCdEQsRUFBNEJyRSxHQUVyRCxHQUFJcUUsRUFBUXVELGtCQUNadkQsRUFBUXdELFFBQ1J4RCxFQUFRdUQsa0JBQWtCNUgsRUFBS0EsUUFHeEIsR0FBS3FFLEVBQWdCeUQsZ0JBQWlCLENBQzNDLElBQUlDLEVBQVMxRCxFQUFnQnlELGtCQUM3QkMsRUFBTUMsVUFBUyxHQUNmRCxFQUFNRSxRQUFRLFlBQWFqSSxHQUMzQitILEVBQU1HLFVBQVUsWUFBYWxJLEdBQzdCK0gsRUFBTUksYUMzQlJDLEVBQTJCLEdDRTNCQyxFRENKLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSixFQUF5QkcsR0FDNUMsUUFBcUI1RCxJQUFqQjZELEVBQ0gsT0FBT0EsRUFBYUMsUUFHckIsSUFBSUMsRUFBU04sRUFBeUJHLEdBQVksQ0FHakRFLFFBQVMsSUFPVixPQUhBRSxFQUFvQkosR0FBVUssS0FBS0YsRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0gsR0FHcEVJLEVBQU9ELFFDbEJXSCxDQUFvQixLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vRG9jLy4vc3JjL3RzL2RvY29iamVjdC50cyIsIndlYnBhY2s6Ly9Eb2MvLi9zcmMvdHMvZXJyb3JzLnRzIiwid2VicGFjazovL0RvYy8uL3NyYy90cy91dGlscy50cyIsIndlYnBhY2s6Ly9Eb2Mvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vRG9jL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IHtzZXRDdXJzb3JQb3MsIGdldEN1cnNvclBvc30gZnJvbSBcIi4vdXRpbHNcIlxyXG5pbXBvcnQgcnVuRXJyb3IsIHsgXHJcbiAgICBST09UX0VSUk9SLFxyXG4gICAgSlFVRVJZX05PVF9ERVRFQ1RFRFxyXG59IGZyb20gJy4vZXJyb3JzJztcclxuXHJcblxyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcclxuICAgICAgICBqUXVlcnk6YW55O1xyXG4gICAgICAgIG1zQ3J5cHRvOmFueTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8qIFV0aWwgTWV0aG9kcyAqL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZpeElucHV0KHNlbGVjdG9yLCBhY3Rpb24pe1xyXG4gICAgbGV0IHBvcyA9IGdldEN1cnNvclBvcyhzZWxlY3RvcigpWzBdKVxyXG4gICAgYWN0aW9uKClcclxuICAgIHNldEN1cnNvclBvcyhzZWxlY3RvcigpWzBdLCBwb3MpXHJcbn1cclxuXHJcblxyXG5cclxudHlwZSBEb2NPYmplY3RIVE1MTGlrZSA9IFxyXG58IE5vZGVcclxufCBOb2RlTGlzdFxyXG58IEpRdWVyeSBcclxufCBzdHJpbmc7XHJcblxyXG4vKiogUGFyYW1ldGVyIEludGVyZmFjZXMgKi9cclxuXHJcbmludGVyZmFjZSBEb2NPYmplY3RSZW5kZXIgZXh0ZW5kcyBBcnJheTxEb2NPYmplY3RSZW5kZXJPYmplY3Q+e31cclxuXHJcbmludGVyZmFjZSBEb2NPYmplY3RCaW5kIHtcclxuICAgIFtrZXk6IHN0cmluZ10gOiBEb2NPYmplY3RCaW5kRnVuY3Rpb25cclxufVxyXG5cclxuaW50ZXJmYWNlIERvY09iamVjdE9wdGlvbnMge1xyXG4gICAgcmVuZGVyIDogRG9jT2JqZWN0UmVuZGVyO1xyXG4gICAgYmluZHMgOiBEb2NPYmplY3RCaW5kO1xyXG4gICAgZWxlbWVudHMgOiB7W2tleTpzdHJpbmddOiBzdHJpbmd9O1xyXG4gICAgdmFsdWVzIDogb2JqZWN0O1xyXG4gICAgYmluZEF0dHIgOiBzdHJpbmc7XHJcbiAgICBiaW5kSW5BdHRyIDogc3RyaW5nO1xyXG4gICAgaXNKUXVlcnkgOiBib29sZWFuO1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4vKiogRG9jT2JqZWN0IEludGVyZmFjZXMgKi9cclxuaW50ZXJmYWNlIERvY09iamVjdEVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudHtcclxuICAgIF9Eb2NPYmplY3Q/IDogRG9jT2JqZWN0XHJcbn1cclxuaW50ZXJmYWNlIERvY09iamVjdERvbUJpbmQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XHJcbiAgICBfRG9jT2JqZWN0Q29uZmlnPyA6IERvY09iamVjdENvbmZpZ1xyXG59XHJcblxyXG5cclxuaW50ZXJmYWNlIERvY09iamVjdEJpbmRBdHRyaWJ1dGUge1xyXG4gICAgW2tleTogc3RyaW5nXSA6IHN0cmluZ1xyXG59XHJcblxyXG5pbnRlcmZhY2UgRG9jT2JqZWN0Q2hpbGRyZW4gZXh0ZW5kcyBBcnJheTxOb2RlPnt9XHJcblxyXG5pbnRlcmZhY2UgRG9jT2JqZWN0RWxlbWVudHMge1xyXG4gICAgW2tleTogc3RyaW5nXSA6IHN0cmluZyB8ICgoc2VsZWN0b3IgOiBzdHJpbmcgKSA9PiBOb2RlTGlzdHxKUXVlcnkpXHJcbn1cclxuXHJcblxyXG50eXBlIERvY09iamVjdEJpbmRGdW5jdGlvbiA9ICggdmFsdWVzOm9iamVjdCwgYXR0cnM6IERvY09iamVjdEJpbmRBdHRyaWJ1dGUsIGNoaWxkcmVuOkRvY09iamVjdENoaWxkcmVuKT0+IERvY09iamVjdEhUTUxMaWtlO1xyXG50eXBlIERvY09iamVjdFJlbmRlckZ1bmN0aW9uID0gKCB2YWx1ZXM6b2JqZWN0LCBwcmV2VmFsdWVzOm9iamVjdCk9PnZvaWQ7XHJcblxyXG5pbnRlcmZhY2UgRG9jT2JqZWN0UmVuZGVyT2JqZWN0IHtcclxuICAgIGNsZWFuIDogRG9jT2JqZWN0UmVuZGVyRnVuY3Rpb25cclxuICAgIGFjdGlvbiA6IERvY09iamVjdFJlbmRlckZ1bmN0aW9uXHJcbiAgICBkZXAgOiBBcnJheTxzdHJpbmc+XHJcbn1cclxuXHJcblxyXG5pbnRlcmZhY2UgRG9jT2JqZWN0Q29uZmlnIHtcclxuICAgIG9yaWdpbmFsQ2hpbGRyZW46IEFycmF5PE5vZGU+O1xyXG4gICAgb3JpZ2luYWxDaGlsZHJlbkhUTUw6IHN0cmluZztcclxuICAgIG9yaWdpbmFsQXR0cmlidXRlczoge1trZXk6c3RyaW5nXSA6IHN0cmluZ307XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5jbGFzcyBCaW5kIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnZC1iaW5kJywgQmluZClcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgRG9jT2JqZWN0IHtcclxuXHJcbiAgICBzdGF0aWMgcGFyc2VyIDogRE9NUGFyc2VyID0gbmV3IERPTVBhcnNlcigpXHJcblxyXG4gICAgc3RhdGljIHRvTm9kZUFycmF5KGFueSA6IERvY09iamVjdEhUTUxMaWtlIHwgQXJyYXk8c3RyaW5nfE5vZGU+ICkgOiBBcnJheTxOb2RlPiB7XHJcbiAgICAgICAgaWYodHlwZW9mIGFueSA9PT0gJ3N0cmluZycpe1xyXG4gICAgICAgICAgICByZXR1cm4gWy4uLkRvY09iamVjdC5wYXJzZXIucGFyc2VGcm9tU3RyaW5nKGFueSwgJ3RleHQvaHRtbCcpLmJvZHkuY2hpbGROb2Rlc11cclxuICAgICAgICB9ZWxzZSBpZihOb2RlTGlzdC5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihhbnkpIHx8ICh3aW5kb3cualF1ZXJ5ICYmIGFueSBpbnN0YW5jZW9mIGpRdWVyeSkpe1xyXG4gICAgICAgICAgICByZXR1cm4gWyAuLi4oYW55IGFzIE5vZGVMaXN0KV1cclxuICAgICAgICB9ZWxzZSBpZihBcnJheS5pc0FycmF5KGFueSkpe1xyXG4gICAgICAgICAgICByZXR1cm4gYW55XHJcbiAgICAgICAgICAgIC5maWx0ZXIoZT0+ICh0eXBlb2YgZSA9PT0gJ3N0cmluZycpIHx8IGUgaW5zdGFuY2VvZiBOb2RlIClcclxuICAgICAgICAgICAgLm1hcChlPT4gKHR5cGVvZiBlID09PSAnc3RyaW5nJykgPyBEb2NPYmplY3QudG9Ob2RlQXJyYXkoZSlbMF0gOiBlICk7XHJcbiAgICAgICAgfSBlbHNlIGlmKGFueSBpbnN0YW5jZW9mIE5vZGUgfHwgYW55IGluc3RhbmNlb2YgRG9jdW1lbnQgKXtcclxuICAgICAgICAgICAgcmV0dXJuIFthbnldXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBkZWZhdWx0UGFyYW1zKHtcclxuICAgICAgICByZW5kZXIgPSBbXSxcclxuICAgICAgICBiaW5kcyA9IHt9LFxyXG4gICAgICAgIGVsZW1lbnRzID0ge30sXHJcbiAgICAgICAgdmFsdWVzID0ge30sXHJcbiAgICAgICAgYmluZEF0dHIgPSAnZC1iaW5kJyxcclxuICAgICAgICBiaW5kSW5BdHRyID0gJ2QtYmluZC1pbicsXHJcbiAgICAgICAgaXNKUXVlcnkgPSBmYWxzZVxyXG4gICAgfSA9IHt9KSA6IERvY09iamVjdE9wdGlvbnMge1xyXG4gICAgICAgIHJldHVybiAgeyBlbGVtZW50cywgdmFsdWVzLCByZW5kZXIsIGJpbmRzLCBiaW5kQXR0ciwgYmluZEluQXR0ciwgaXNKUXVlcnkgfSBcclxuICAgIH1cclxuXHJcblxyXG5cclxuXHJcbiAgICBfdmFsdWVzIDogb2JqZWN0O1xyXG4gICAgZWxlbWVudHMgOiBQcm94eUhhbmRsZXI8RG9jT2JqZWN0RWxlbWVudHM+O1xyXG4gICAgcm9vdCA6IERvY09iamVjdEVsZW1lbnQ7XHJcbiAgICByZW5kZXIgOiBEb2NPYmplY3RSZW5kZXI7XHJcbiAgICBiaW5kcyA6IERvY09iamVjdEJpbmQ7XHJcbiAgICBiaW5kQXR0ciA6IHN0cmluZztcclxuICAgIGJpbmRJbkF0dHIgOiBzdHJpbmc7XHJcbiAgICBxdWVyeSA6IFByb3h5SGFuZGxlcjxEb2NPYmplY3RFbGVtZW50cz47XHJcbiAgICBfcXVlcnlTZWxlY3QgOiAoc2VsZWN0b3I6c3RyaW5nKT0+IE5vZGVMaXN0IHwgSlF1ZXJ5O1xyXG4gICAgX2lzSlF1ZXJ5IDogYm9vbGVhblxyXG4gICAgb25Mb2FkOiAoKT0+dm9pZFxyXG5cclxuICAgIHNldCB2YWx1ZXModmFsdWVzKSB7XHJcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJUcmllZCB0byBzZXQgRG9jT2JqZWN0LnZhbHVlLiBUcnkgY3JlYXRpbmcgYSBpbm5lciBvYmplY3QgaW5zdGVhZC5cIilcclxuICAgIH1cclxuICAgIGdldCB2YWx1ZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlcztcclxuICAgIH1cclxuICAgIFxyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3Rvcihyb290IDogRG9jT2JqZWN0RWxlbWVudCB8IEpRdWVyeSwgb3B0aW9ucyA6IG9iamVjdCkge1xyXG4gICAgICAgIC8vQWRkIERlZmF1bHQgUGFyYW1ldGVycyB0byBvcHRpb25zXHJcbiAgICAgICAgY29uc3QgeyBlbGVtZW50cywgdmFsdWVzLCByZW5kZXIsIGJpbmRzLCBiaW5kQXR0ciwgYmluZEluQXR0ciwgaXNKUXVlcnkgfSA6IERvY09iamVjdE9wdGlvbnMgPSBEb2NPYmplY3QuZGVmYXVsdFBhcmFtcyhvcHRpb25zKVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vRXh0cmFjdCBET00gZWxlbWVudCBmcm9tIEhUTUxFbGVtZW50IE9yIEpxdWVyeSBPYmplY3RcclxuICAgICAgICBsZXQgcm9vdEVsZW1lbnQgPSBEb2NPYmplY3QudG9Ob2RlQXJyYXkocm9vdClbMF1cclxuICAgICAgICBcclxuICAgICAgICAvL1NldCBSb290IE9iamVjdFxyXG4gICAgICAgIGlmKHJvb3RFbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgKXtcclxuICAgICAgICAgICAgdGhpcy5yb290ID0gcm9vdEVsZW1lbnRcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcnVuRXJyb3IoUk9PVF9FUlJPUiwgdHJ1ZSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vU2V0IEpxdWVyeVxyXG4gICAgICAgIGlmKGlzSlF1ZXJ5ICYmIHdpbmRvdy5qUXVlcnkpe1xyXG4gICAgICAgICAgICAvL0lmIEpxdWVyeSBpcyBkZXRlY3RlZCBhbmQgaXMgc2V0IHRvIGpxdWVyeSBtb2RlLi4uXHJcbiAgICAgICAgICAgIHRoaXMuX2lzSlF1ZXJ5ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIC8vU2V0IFF1ZXJ5IFNlbGVjdCBzdGF0ZW1lbnQgdG8gdXNlIGpRdWVyeVxyXG4gICAgICAgICAgICB0aGlzLl9xdWVyeVNlbGVjdCA9ICguLi5wcm9wcykgPT4gJCh0aGlzLnJvb3QpLmZpbmQoLi4ucHJvcHMpXHJcbiAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICAvL0lmIEpxdWVyeSBpcyBub3QgZGV0ZWN0ZWQuLi5cclxuICAgICAgICAgICAgaWYoaXNKUXVlcnkpe1xyXG4gICAgICAgICAgICAgICAgLy9JZiBzZXQgdG8ganF1ZXJ5IG1vZGUuLi5cclxuICAgICAgICAgICAgICAgIHJ1bkVycm9yKEpRVUVSWV9OT1RfREVURUNURUQsIGZhbHNlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vU2V0IFF1ZXJ5IFNlbGVjdCBzdGF0ZW1lbnQgdG8gdXNlIEhUTUxFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGxcclxuICAgICAgICAgICAgdGhpcy5faXNKUXVlcnkgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5fcXVlcnlTZWxlY3QgPSAoLi4ucHJvcHMpID0+IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yQWxsKC4uLnByb3BzKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9TZXQgUm9vdCBPYmplY3QgdG8gdGhpc1xyXG4gICAgICAgIHRoaXMucm9vdC5fRG9jT2JqZWN0ID0gdGhpcztcclxuXHJcbiAgICAgICAgLy9TZXQgUmVuZGVyIEZ1bmN0aW9uc1xyXG4gICAgICAgIHRoaXMucmVuZGVyID0gcmVuZGVyO1xyXG5cclxuICAgICAgICAvL1NldCBCaW5kIEZ1bmN0aW9uc1xyXG4gICAgICAgIHRoaXMuYmluZHMgPSBiaW5kcztcclxuXHJcbiAgICAgICAgLy9TZXQgQmluZCBBdHRyaWJ1dGVcclxuICAgICAgICB0aGlzLmJpbmRBdHRyID0gYmluZEF0dHI7XHJcblxyXG4gICAgICAgIC8vU2V0IEJpbmQgSW4gQXR0cmlidXRlXHJcbiAgICAgICAgdGhpcy5iaW5kSW5BdHRyID0gYmluZEluQXR0cjtcclxuICAgICAgICBcclxuICAgICAgICAvL1NldCBRdWVyeSBQcm94eVxyXG4gICAgICAgIHRoaXMucXVlcnkgPSBuZXcgUHJveHkoe30sIHtcclxuICAgICAgICAgICAgZ2V0OiAodGFyZ2V0LCBwcm9wICkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIHByb3AgPT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICB0YXJnZXRbcHJvcF0gPyB0YXJnZXRbcHJvcF0gOiBfID0+IHRoaXMuX3F1ZXJ5U2VsZWN0KCAvLiooXFwufFxcI3xcXFt8XFxdKS4qL2dtLmV4ZWMocHJvcCkgPyBwcm9wIDogJyMnICsgcHJvcCApIFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6ICh0YXJnZXQsIHByb3AsIHZhbHVlLCByZWNlaXZlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHZhbHVlID0gKCkgPT4gdGhpcy5fcXVlcnlTZWxlY3QodmFsdWUpXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHByb3AgPT09ICdzdHJpbmcnKXtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSBfID0+IHZhbHVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSBcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAvL1NldCBFbGVtZW50cyBQcm94eVxyXG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBuZXcgUHJveHkodGhpcy5xdWVyeSwge1xyXG4gICAgICAgICAgICBnZXQ6ICh0YXJnZXQsIHByb3ApID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRbcHJvcF0oKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLy9BZGQgaW4gZWxlbWVudHMgZnJvbSBvcHRpb25zXHJcbiAgICAgICAgaWYgKGVsZW1lbnRzKSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKGVsZW1lbnRzKS5mb3JFYWNoKChlID0+IHsgdGhpcy5xdWVyeVtlWzBdXSA9IGVbMV0gfSkpXHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgdGhpcy5fdmFsdWVzID0gbmV3IFByb3h5KCF2YWx1ZXMgfHwgdHlwZW9mIHZhbHVlcyAhPT0gJ29iamVjdCcgPyB7fSA6IHZhbHVlcywge1xyXG4gICAgICAgICAgICBzZXQ6ICh0YXJnZXQsIHByb3AsIHZhbHVlLCByZWNlaXZlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ydW5SZW5kZXIoeyBbcHJvcF06IHZhbHVlIH0pXHJcbiAgICAgICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLm9uTG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5ydW5SZW5kZXIoeyBbdHJ1ZSBhcyBhbnldOiB0cnVlIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHRoaXMuX2lzSlF1ZXJ5KXtcclxuICAgICAgICAgICAgJCh0aGlzLm9uTG9hZClcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgd2luZG93Lm9ubG9hZCA9IHRoaXMub25Mb2FkXHJcbiAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBpc0JpbmRJbihlbGVtZW50IDogRG9jT2JqZWN0RG9tQmluZCkgOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gKCBlbGVtZW50LmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRJbkF0dHIpICYmIHRydWUgKSBcclxuICAgIH1cclxuICAgIGlzQmluZChlbGVtZW50IDogRG9jT2JqZWN0RG9tQmluZCkgOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gKGVsZW1lbnQubG9jYWxOYW1lID09PSAnZC1iaW5kJyB8fCBlbGVtZW50LmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRBdHRyKSkgJiYgdHJ1ZVxyXG4gICAgfVxyXG4gICAgZmluZE9yUmVnaXN0ZXJCaW5kKERPTWVsZW1lbnQgOiBEb2NPYmplY3REb21CaW5kKSA6IERvY09iamVjdENvbmZpZyB7XHJcbiAgICAgICAgaWYoRE9NZWxlbWVudC5fRG9jT2JqZWN0Q29uZmlnID09PSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICBsZXQgb3JpZ2luYWxDaGlsZHJlbiA9IFsuLi5ET01lbGVtZW50LmNoaWxkTm9kZXNdXHJcbiAgICAgICAgICAgIG9yaWdpbmFsQ2hpbGRyZW4udG9TdHJpbmcgPSAoKT0+IERPTWVsZW1lbnQuaW5uZXJIVE1MXHJcbiAgICAgICAgICAgIERPTWVsZW1lbnQuX0RvY09iamVjdENvbmZpZyA9IHtcclxuICAgICAgICAgICAgICAgIG9yaWdpbmFsQ2hpbGRyZW4sXHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbENoaWxkcmVuSFRNTDogRE9NZWxlbWVudC5pbm5lckhUTUwsXHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEF0dHJpYnV0ZXM6IFsuLi5ET01lbGVtZW50LmF0dHJpYnV0ZXNdLnJlZHVjZSggKGEsYyk9PntyZXR1cm4gey4uLmEsIFtjLm5hbWVdOmMudmFsdWV9IH0sIHt9IClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gRE9NZWxlbWVudC5fRG9jT2JqZWN0Q29uZmlnXHJcbiAgICB9XHJcblxyXG4gICAgZ2VuZXJhdGVCaW5kKGVsZW1lbnQgOiBEb2NPYmplY3REb21CaW5kLCBiaW5kLCBib3VuZCA6IERvY09iamVjdEhUTUxMaWtlICkgOiBEb2NPYmplY3REb21CaW5kIHwgTm9kZVtdIHtcclxuICAgICAgICBjb25zdCBjb25maWcgPSBlbGVtZW50Ll9Eb2NPYmplY3RDb25maWc7XHJcbiAgICAgICAgY29uc3Qgbm9kZUFycmF5ID0gRG9jT2JqZWN0LnRvTm9kZUFycmF5KGJvdW5kKTtcclxuICAgICAgICBpZih0aGlzLmlzQmluZChlbGVtZW50KSl7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0RWxlbWVudCA9IG5vZGVBcnJheS5maW5kKGVsID0+IGVsIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIGFzIERvY09iamVjdERvbUJpbmQ7XHJcbiAgICAgICAgICAgIGZpcnN0RWxlbWVudC5fRG9jT2JqZWN0Q29uZmlnID0gY29uZmlnO1xyXG4gICAgICAgICAgICBmaXJzdEVsZW1lbnQuc2V0QXR0cmlidXRlKChmaXJzdEVsZW1lbnQubG9jYWxOYW1lID09PSAnZC1iaW5kJyA/ICd0bycgOiB0aGlzLmJpbmRBdHRyKSwgYmluZClcclxuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoY29uZmlnLm9yaWdpbmFsQXR0cmlidXRlcykuZmlsdGVyKGF0dEE9PiEoWydkLWJpbmQtaW4nLCAndG8nXS5pbmNsdWRlcyhhdHRBWzBdKSkpLmZvckVhY2goYXR0QT0+Zmlyc3RFbGVtZW50LnNldEF0dHJpYnV0ZShhdHRBWzBdLCBhdHRBWzFdKSlcclxuICAgICAgICAgICAgcmV0dXJuIGZpcnN0RWxlbWVudDtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIG5vZGVBcnJheTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgXHJcblxyXG4gICAgcnVuUmVuZGVyKHZhbHVlQ2hhbmdlcyA9IHt9KSA6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucmVuZGVyLmZpbHRlcihyZW4gPT4gKHJlbi5kZXAgJiYgQXJyYXkuaXNBcnJheShyZW4uZGVwKSAmJiByZW4uZGVwLnNvbWUoKGRlcHApID0+IChkZXBwIGluIHZhbHVlQ2hhbmdlcykpKSB8fCAocmVuLmRlcCA9PT0gdW5kZWZpbmVkKSkuZm9yRWFjaChyZW4gPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVuLmNsZWFuKSByZW4uY2xlYW4oeyAuLi50aGlzLnZhbHVlcywgLi4udmFsdWVDaGFuZ2VzIH0sIHRoaXMudmFsdWVzKVxyXG4gICAgICAgICAgICByZW4uYWN0aW9uKHsgLi4udGhpcy52YWx1ZXMsIC4uLnZhbHVlQ2hhbmdlcyB9LCB0aGlzLnZhbHVlcylcclxuICAgICAgICB9KVxyXG4gICAgICAgIHRoaXMucnVuQmluZHModGhpcy5yb290LCB2YWx1ZUNoYW5nZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEJpbmRBY3Rpb24oZWxlbWVudCA6IEhUTUxFbGVtZW50KSA6IFtzdHJpbmcsIChyZXBsYWNlIDogTm9kZSAmIE5vZGVMaXN0ICk9PnZvaWRdIHtcclxuICAgICAgICBpZih0aGlzLmlzQmluZChlbGVtZW50KSl7XHJcbiAgICAgICAgICAgIGlmKGVsZW1lbnQuZ2V0QXR0cmlidXRlKHRoaXMuYmluZEF0dHIpKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbZWxlbWVudC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kQXR0ciksIChyZXBsYWNlKT0+ZWxlbWVudC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChyZXBsYWNlLCBlbGVtZW50KV1cclxuICAgICAgICAgICAgfWVsc2UgaWYoZWxlbWVudC5sb2NhbE5hbWUgPT09ICdkLWJpbmQnKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3RvJyksIChyZXBsYWNlKT0+ZWxlbWVudC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChyZXBsYWNlLCBlbGVtZW50KV1cclxuICAgICAgICAgICAgfSBcclxuICAgICAgICB9ZWxzZSBpZih0aGlzLmlzQmluZEluKGVsZW1lbnQpKXtcclxuICAgICAgICAgICAgcmV0dXJuIFtlbGVtZW50LmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRJbkF0dHIpLCAocmVwbGFjZSk9PntcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBub2RlIG9mIHJlcGxhY2UpIGVsZW1lbnQuYXBwZW5kQ2hpbGQobm9kZSk7XHJcbiAgICAgICAgICAgIH1dXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBydW5CaW5kcyhyb290LCB2YWx1ZUNoYW5nZXMgPSB7fSkge1xyXG4gICAgICAgIChBcnJheS5pc0FycmF5KHJvb3QpID8gcm9vdCA6IFtyb290XSkgXHJcbiAgICAgICAgLmZpbHRlcihydD0+cnQgJiYgcnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudClcclxuICAgICAgICAuZm9yRWFjaCgocnQpPT57XHJcbiAgICAgICAgICAgIFsgLi4uKHJ0LnF1ZXJ5U2VsZWN0b3JBbGwoYFske3RoaXMuYmluZEF0dHJ9XSwgWyR7dGhpcy5iaW5kSW5BdHRyfV0sIGQtYmluZFt0b11gKSkgXSBcclxuICAgICAgICAgICAgLmZvckVhY2goIGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy9HZXQgVGhlIEJpbmQgTWV0aG9kLCBhbmQgdGhlIEZ1bmN0aW9uIHRvIGluc2VydCBIVE1MIFxyXG4gICAgICAgICAgICAgICAgY29uc3QgW2JpbmQsIGJpbmRBY3Rpb25dID0gdGhpcy5nZXRCaW5kQWN0aW9uKGVsZW1lbnQpXHJcbiAgICAgICAgICAgICAgICAvL0NoZWNrIGlmIEJpbmQgRXhpc3RzIFxyXG4gICAgICAgICAgICAgICAgaWYgKGJpbmQgaW4gdGhpcy5iaW5kcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL0dldCBPciByZWdpc3RlciBCaW5kIFRhZydzIENvbmZpZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLmZpbmRPclJlZ2lzdGVyQmluZChlbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9JbnNlcnQgSFRNTFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiaW5kQWN0aW9uKHRoaXMucnVuQmluZHMoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vV3JhcCBCaW5kIE1ldGhvZCB0byBwcmVwYXJlIGJpbmQgZm9yIGRvY3VtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlQmluZChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5kLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1J1biBCaW5kIE1ldGhvZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmluZHNbYmluZF0oXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgLi4udGhpcy52YWx1ZXMsIC4uLnZhbHVlQ2hhbmdlcyB9LCAvL1Bhc3MgaW4gdXBkYXRlcyB2YWx1ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLm9yaWdpbmFsQXR0cmlidXRlcywgLy9QYXNzIGluIG9yaWdpbmFsIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLm9yaWdpbmFsQ2hpbGRyZW4sIC8vUGFzcyBpbiBvcmlnaW5hbCBjaGlsZHJlblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUNoYW5nZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIHJldHVybiByb290O1xyXG4gICAgfVxyXG59XHJcbmlmKHdpbmRvdy5qUXVlcnkpe1xyXG4gICAgKGZ1bmN0aW9uKCQpIHtcclxuICAgICAgICAkLmZuLmV4dGVuZCh7XHJcbiAgICAgICAgICAgIERvY09iamVjdCA6IGZ1bmN0aW9uKCBvcHRpb25zID0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYodGhpc1swXS5fRG9jT2JqZWN0ICYmICFvcHRpb25zICkgcmV0dXJuIHRoaXNbMF0uX0RvY09iamVjdDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXcgRG9jT2JqZWN0KHRoaXMsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBuZXcgRG9jT2JqZWN0KHRoaXMsIHsgaXNKUXVlcnk6dHJ1ZSwgLi4ub3B0aW9ucyB9KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbMF0uX0RvY09iamVjdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9KShqUXVlcnkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb2JqKHJvb3QgOiBEb2NPYmplY3RFbGVtZW50IHwgSlF1ZXJ5LCBvcHRpb25zIDogb2JqZWN0KSA6IERvY09iamVjdHtcclxuICAgIHJldHVybiBuZXcgRG9jT2JqZWN0KHJvb3QsIG9wdGlvbnMpXHJcbn1cclxuXHJcblxyXG4vKlxyXG52YXIgZG9jID0gbmV3IERvY09iamVjdCh7XHJcbiAgICB2YWx1ZXM6IHtcclxuICAgIH0sXHJcbiAgICBlbGVtZW50czp7XHJcblxyXG4gICAgfSxcclxuICAgIGJpbmRzOntcclxuXHJcbiAgICB9LFxyXG4gICAgcmVuZGVyOiBbXHJcblxyXG4gICAgXVxyXG59KTsgJChkb2Mub25Mb2FkKVxyXG4qLyIsIlxyXG5cclxuZXhwb3J0IGNvbnN0IFJPT1RfRVJST1IgPSAnUk9PVF9FUlJPUidcclxuZXhwb3J0IGNvbnN0IEpRVUVSWV9OT1RfREVURUNURUQgPSAnSlFVRVJZX05PVF9ERVRFQ1RFRCdcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBydW5FcnJvcihlcnJvciA6IHN0cmluZywgZmFpbD1mYWxzZSl7XHJcbiAgICBpZihlcnJvciBpbiBFUlJPUlMpe1xyXG4gICAgICAgIGlmKGZhaWwpe1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignRG9jT2JqZWN0OiAnKyBFUlJPUlNbZXJyb3JdLm1lc3NhZ2UpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKEVSUk9SU1tlcnJvcl0ubWVzc2FnZSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IEVSUk9SUyA9IHtcclxuICAgIFJPT1RfRVJST1IgOiB7XHJcbiAgICAgICAgbWVzc2FnZTogXCJSb290IEVsZW1lbnQgTXVzdCBiZSBhIHZhbGlkIE5vZGUsIE9yIGpRdWVyeSBFbGVtZW50XCJcclxuICAgIH0sXHJcbiAgICBKUVVFUllfTk9UX0RFVEVDVEVEOiB7XHJcbiAgICAgICAgbWVzc2FnZSA6IFwiSlF1ZXJ5IGlzIG5vdCBkZXRlY3RlZC4gUGxlYXNlIGxvYWQgSlF1ZXJ5IGJlZm9yZSBEb2NPYmplY3RcIlxyXG4gICAgfVxyXG59XHJcbiIsImludGVyZmFjZSBEb2N1bWVudCB7XHJcbiAgICBzZWxlY3Rpb246IHtcclxuICAgICAgICBcclxuICAgIH1cclxufVxyXG5cclxuLy8gQ3JlZGl0czogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjg5NzE1NS9nZXQtY3Vyc29yLXBvc2l0aW9uLWluLWNoYXJhY3RlcnMtd2l0aGluLWEtdGV4dC1pbnB1dC1maWVsZFxyXG4gZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnNvclBvcyhlbGVtZW50IDogSFRNTElucHV0RWxlbWVudCkgOiBudW1iZXIge1xyXG4gICAgLy8gaWYgKGRvY3VtZW50LnNlbGVjdGlvbikge1xyXG4gICAgLy8gICAgIGVsZW1lbnQuZm9jdXMoKTtcclxuICAgIC8vICAgICByZXR1cm4gIGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgLWVsZW1lbnQudmFsdWUubGVuZ3RoKTtcclxuICAgIC8vIH1cclxuICAgICAgICByZXR1cm4gZWxlbWVudC5zZWxlY3Rpb25EaXJlY3Rpb24gPT0gJ2JhY2t3YXJkJyA/IGVsZW1lbnQuc2VsZWN0aW9uU3RhcnQgOiBlbGVtZW50LnNlbGVjdGlvbkVuZDtcclxufVxyXG5cclxuLy8gQ3JlZGl0czogaHR0cDovL2Jsb2cudmlzaGFsb24ubmV0L2luZGV4LnBocC9qYXZhc2NyaXB0LWdldHRpbmctYW5kLXNldHRpbmctY2FyZXQtcG9zaXRpb24taW4tdGV4dGFyZWEvXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRDdXJzb3JQb3MoZWxlbWVudCA6IEhUTUxJbnB1dEVsZW1lbnQsIHBvcyA6IG51bWJlcikgOiB2b2lkIHtcclxuICAgIC8vIE1vZGVybiBicm93c2Vyc1xyXG4gICAgaWYgKGVsZW1lbnQuc2V0U2VsZWN0aW9uUmFuZ2UpIHtcclxuICAgIGVsZW1lbnQuZm9jdXMoKTtcclxuICAgIGVsZW1lbnQuc2V0U2VsZWN0aW9uUmFuZ2UocG9zLCBwb3MpO1xyXG4gICAgXHJcbiAgICAvLyBJRTggYW5kIGJlbG93XHJcbiAgICB9IGVsc2UgaWYgKChlbGVtZW50IGFzIGFueSkuY3JlYXRlVGV4dFJhbmdlKSB7XHJcbiAgICAgIHZhciByYW5nZSA9IChlbGVtZW50IGFzIGFueSkuY3JlYXRlVGV4dFJhbmdlKCk7XHJcbiAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xyXG4gICAgICByYW5nZS5tb3ZlRW5kKCdjaGFyYWN0ZXInLCBwb3MpO1xyXG4gICAgICByYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIHBvcyk7XHJcbiAgICAgIHJhbmdlLnNlbGVjdCgpO1xyXG4gICAgfVxyXG59IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOTEpO1xuIl0sIm5hbWVzIjpbInNlbGVjdG9yIiwiYWN0aW9uIiwicG9zIiwiZ2V0Q3Vyc29yUG9zIiwic2V0Q3Vyc29yUG9zIiwiQmluZCIsIkhUTUxFbGVtZW50IiwiY29uc3RydWN0b3IiLCJzdXBlciIsIndpbmRvdyIsImN1c3RvbUVsZW1lbnRzIiwiZGVmaW5lIiwiRG9jT2JqZWN0Iiwicm9vdCIsIm9wdGlvbnMiLCJlbGVtZW50cyIsInZhbHVlcyIsInJlbmRlciIsImJpbmRzIiwiYmluZEF0dHIiLCJiaW5kSW5BdHRyIiwiaXNKUXVlcnkiLCJkZWZhdWx0UGFyYW1zIiwicm9vdEVsZW1lbnQiLCJ0b05vZGVBcnJheSIsInRoaXMiLCJST09UX0VSUk9SIiwialF1ZXJ5IiwiX2lzSlF1ZXJ5IiwiX3F1ZXJ5U2VsZWN0IiwicHJvcHMiLCIkIiwiZmluZCIsIkpRVUVSWV9OT1RfREVURUNURUQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX0RvY09iamVjdCIsInF1ZXJ5IiwiUHJveHkiLCJnZXQiLCJ0YXJnZXQiLCJwcm9wIiwiXyIsImV4ZWMiLCJzZXQiLCJ2YWx1ZSIsInJlY2VpdmVyIiwiT2JqZWN0IiwiZW50cmllcyIsImZvckVhY2giLCJlIiwiX3ZhbHVlcyIsInJ1blJlbmRlciIsIm9uTG9hZCIsIm9ubG9hZCIsInN0YXRpYyIsImFueSIsInBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsImJvZHkiLCJjaGlsZE5vZGVzIiwiTm9kZUxpc3QiLCJwcm90b3R5cGUiLCJpc1Byb3RvdHlwZU9mIiwiQXJyYXkiLCJpc0FycmF5IiwiZmlsdGVyIiwiTm9kZSIsIm1hcCIsIkRvY3VtZW50IiwiRXJyb3IiLCJpc0JpbmRJbiIsImVsZW1lbnQiLCJnZXRBdHRyaWJ1dGUiLCJpc0JpbmQiLCJsb2NhbE5hbWUiLCJmaW5kT3JSZWdpc3RlckJpbmQiLCJET01lbGVtZW50IiwidW5kZWZpbmVkIiwiX0RvY09iamVjdENvbmZpZyIsIm9yaWdpbmFsQ2hpbGRyZW4iLCJ0b1N0cmluZyIsImlubmVySFRNTCIsIm9yaWdpbmFsQ2hpbGRyZW5IVE1MIiwib3JpZ2luYWxBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInJlZHVjZSIsImEiLCJjIiwibmFtZSIsImdlbmVyYXRlQmluZCIsImJpbmQiLCJib3VuZCIsImNvbmZpZyIsIm5vZGVBcnJheSIsImZpcnN0RWxlbWVudCIsImVsIiwic2V0QXR0cmlidXRlIiwiYXR0QSIsImluY2x1ZGVzIiwidmFsdWVDaGFuZ2VzIiwicmVuIiwiZGVwIiwic29tZSIsImRlcHAiLCJjbGVhbiIsInJ1bkJpbmRzIiwiZ2V0QmluZEFjdGlvbiIsInJlcGxhY2UiLCJwYXJlbnROb2RlIiwicmVwbGFjZUNoaWxkIiwibm9kZSIsImFwcGVuZENoaWxkIiwicnQiLCJiaW5kQWN0aW9uIiwiRE9NUGFyc2VyIiwiZm4iLCJleHRlbmQiLCJlYWNoIiwiZXJyb3IiLCJmYWlsIiwiRVJST1JTIiwibWVzc2FnZSIsImNvbnNvbGUiLCJzZWxlY3Rpb25EaXJlY3Rpb24iLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsInNldFNlbGVjdGlvblJhbmdlIiwiZm9jdXMiLCJjcmVhdGVUZXh0UmFuZ2UiLCJyYW5nZSIsImNvbGxhcHNlIiwibW92ZUVuZCIsIm1vdmVTdGFydCIsInNlbGVjdCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19leHBvcnRzX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9