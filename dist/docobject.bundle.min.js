var Doc;(()=>{"use strict";var e={360:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(391);t.default=class{constructor(e){return this.obj=e,new Proxy(this,{get:(e,t)=>this.Gen(t)})}Gen(e){return(t=[],n)=>{if(this.obj&&e in this.obj.binds){const r=this.obj.binds[e](this.obj.values,n,i.DocObject.toNodeArray(t));return"function"==typeof r?r(this.obj.g):r}let r=document.createElement(e);for(let e in n)if("style"===e&&"object"==typeof n[e])for(let t in n[e])r.style[t]=n[e][t];else e.startsWith("on")?r[e]=n[e]:r.setAttribute(e,n[e]);return i.DocObject.toNodeArray(t).forEach((e=>{r.appendChild(e)})),r}}}},391:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&i(t,e,n);return r(t,e),t},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DocObject=void 0;const c=o(n(360)),u=s(n(382));class a{constructor(e,t){this.querySelectorAll=e=>this.root.querySelectorAll(e);const{elements:n,values:i,render:r,binds:s,bindAttr:o,bindInAttr:d,isJQuery:l,connections:f,removeOnload:h}=a.defaultParams(t);let b=a.toNodeArray(e)[0];b instanceof HTMLElement?this.root=b:(0,u.default)(u.ROOT_ERROR,!0),this._connections=f,l&&window.jQuery?(this._isJQuery=!0,this._querySelect=(...e)=>$(this.root).find(...e)):(l&&(0,u.default)(u.JQUERY_NOT_DETECTED,!1),this._isJQuery=!1,this._querySelect=(...e)=>this.root.querySelectorAll(...e)),this.root._DocObject=this,this.render=r,this.g=new c.default(this),this.binds="function"==typeof s?s(this.g):s,this.bindAttr=o,this.bindInAttr=d,this.query=new Proxy({},{get:(e,t)=>{if("string"==typeof t)return e[t]?e[t]:e=>this._querySelect(/.*(\.|\#|\[|\]).*/gm.exec(t)?t:"#"+t)},set:(e,t,n,i)=>("string"==typeof n&&(n=()=>this._querySelect(n)),"string"==typeof t&&(e[t]=e=>n),!0)}),this.elements=new Proxy(this.query,{get:(e,t)=>e[t]()}),n&&Object.entries(n).forEach((e=>{this.query[e[0]]=e[1]})),this._values=new Proxy(i&&"object"==typeof i?i:{},{set:(e,t,n,i)=>(this.runRender({[t]:n}),e[t]=n,this.runConnections({[t]:n}),!0)}),this.onLoad=()=>{this.runRender({[!0]:!0}),this.runConnections(this.values)},h||(this._isJQuery?$(this.onLoad):window.onload=this.onLoad)}static toNodeArray(e){return"string"==typeof e||"number"==typeof e?[...a.parser.parseFromString(e.toString(),"text/html").body.childNodes]:NodeList.prototype.isPrototypeOf(e)||window.jQuery&&e instanceof jQuery?[...e]:Array.isArray(e)?e.filter((e=>"string"==typeof e||e instanceof Node)).map((e=>"string"==typeof e?a.toNodeArray(e)[0]:e)):e instanceof Node||e instanceof Document?[e]:void 0}static defaultParams({render:e=[],binds:t={},elements:n={},values:i={},bindAttr:r="d-bind",bindInAttr:s="d-bind-in",isJQuery:o=!1,connections:c=[],removeOnload:u=!1}={}){return{elements:n,values:i,render:e,binds:t,bindAttr:r,bindInAttr:s,isJQuery:o,connections:c,removeOnload:u}}set values(e){throw Error("Tried to set DocObject.value. Try creating a inner object instead.")}get values(){return this._values}isBindIn(e){return e.getAttribute(this.bindInAttr)&&!0}isBind(e){return("d-bind"===e.localName||e.getAttribute(this.bindAttr))&&!0}static isDobObjectElement(e){return e._DocObject instanceof a}findOrRegisterBind(e){if(void 0===e._DocObjectConfig){let t=[...e.childNodes];t.toString=()=>e.innerHTML,e._DocObjectConfig={originalChildren:t,originalChildrenHTML:e.innerHTML,originalAttributes:[...e.attributes].reduce(((e,t)=>Object.assign(Object.assign({},e),{[t.name]:t.value})),{})}}return e._DocObjectConfig}generateBind(e,t,n){const i=e._DocObjectConfig,r=a.toNodeArray("function"==typeof n?n(this.g):n);if(this.isBind(e)){const e=r.find((e=>e instanceof HTMLElement));return e._DocObjectConfig=i,e.setAttribute("d-bind"===e.localName?"to":this.bindAttr,t),Object.entries(i.originalAttributes).filter((e=>!["d-bind-in","to"].includes(e[0]))).forEach((t=>e.setAttribute(t[0],t[1]))),e}return r}runRender(e={}){this.render.filter((t=>t.dep&&Array.isArray(t.dep)&&t.dep.some((t=>t in e))||void 0===t.dep)).forEach((t=>{t.clean&&t.clean(Object.assign(Object.assign({},this.values),e),this.values),t.action(Object.assign(Object.assign({},this.values),e),this.values)})),this.runBinds(this.root,e)}getBindAction(e){if(this.isBind(e)){if(e.getAttribute(this.bindAttr))return[e.getAttribute(this.bindAttr),t=>e.parentNode.replaceChild(t,e)];if("d-bind"===e.localName)return[e.getAttribute("to"),t=>e.parentNode.replaceChild(t,e)]}else if(this.isBindIn(e))return[e.getAttribute(this.bindInAttr),t=>{e.innerHTML="";for(let n of t)e.appendChild(n)}]}runBinds(e,t={}){return(Array.isArray(e)?e:[e]).filter((e=>e&&e instanceof HTMLElement)).forEach((e=>{[...e.querySelectorAll(`[${this.bindAttr}], [${this.bindInAttr}], d-bind[to]`)].forEach((e=>{const[n,i]=this.getBindAction(e);if(n in this.binds){const r=this.findOrRegisterBind(e);i(this.runBinds(this.generateBind(e,n,this.binds[n](Object.assign(Object.assign({},this.values),t),r.originalAttributes,r.originalChildren)),t))}}))})),e}runConnections(e={[!0]:!0}){for(let t in e)this._connections.forEach((n=>n.values[t]=e[t]))}connect(...e){return this._connections=[...this._connections,...e],this.runConnections(this.values),this}}t.DocObject=a,a.parser=new DOMParser},382:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.JQUERY_NOT_DETECTED=t.ROOT_ERROR=void 0,t.ROOT_ERROR="ROOT_ERROR",t.JQUERY_NOT_DETECTED="JQUERY_NOT_DETECTED",t.default=function(e,t=!1){if(e in n){if(t)throw Error("DocObject: "+n[e].message);console.error(n[e].message)}};const n={ROOT_ERROR:{message:"Root Element Must be a valid Node, Or jQuery Element"},JQUERY_NOT_DETECTED:{message:"JQuery is not detected. Please load JQuery before DocObject"}}},294:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.gen=t.obj=t.fixInput=void 0;const r=n(391),s=i(n(360)),o=n(605);class c extends HTMLElement{constructor(){super()}}t.fixInput=function(e,t){let n=(0,o.getCursorPos)(e()[0]);t(),(0,o.setCursorPos)(e()[0],n)},window.customElements.define("d-bind",c),window.jQuery&&jQuery.fn.extend({DocObject:function(e=null){return this[0]._DocObject&&!e||(this.each((function(){new r.DocObject(this,e)})),new r.DocObject(this,Object.assign({isJQuery:!0},e))),this[0]._DocObject}}),t.obj=function(e,t){return new r.DocObject(e,t)},t.gen=function(){return new s.default}},605:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setCursorPos=t.getCursorPos=void 0,t.getCursorPos=function(e){return"backward"==e.selectionDirection?e.selectionStart:e.selectionEnd},t.setCursorPos=function(e,t){if(e.setSelectionRange)e.focus(),e.setSelectionRange(t,t);else if(e.createTextRange){var n=e.createTextRange();n.collapse(!0),n.moveEnd("character",t),n.moveStart("character",t),n.select()}}}},t={},n=function n(i){var r=t[i];if(void 0!==r)return r.exports;var s=t[i]={exports:{}};return e[i].call(s.exports,s,s.exports,n),s.exports}(294);Doc=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,